

OOPS
Java Features
Java Architecture
Java Data Types
Value Types and Reference Types
HelloWorld Program
Control Structures
Command Line Arguments
Object class methods
Method Overloading
Constructors
static
inheritance
polymorphism
collections
generics

__________________________________________________________________________________________________________________________

Object Oriented Programming : 

It is an approach that provides a way of modularizing programming, that which can be used to create 
small partition memory area for both data and objects, which are to be used as templates for creating
copies of such modules on demand. 

Object : An object is a real world entity that which possess 3 characterstics known as

	(i) State

	(ii) Behaviour

	(iii) Identity 


OOPs features : 
________________


	1) Encapsulation : Wrapping up of data and functions into a single unit known as Encapsulation. 

	2) Abstraction   : Hiding the irrelevant details of an object, that do not contribute to its essential characterstics known as 				Abstraction.

	*** Encapsulation focuses on showing the relevant details, where abstraction focuses on hiding the irrelevant details ***

	3) Inheritance : Deriving a new entity from already existing entity known as inheritance, through inheritance we can reduce 			   the size of the program. 

	4) Polymorphism : The ability to take more than one form known as polymorpshim. 

class : A class is a template or blueprint, that which contains the combination of data members and member functions. 

Members of the class can be accessable by using the instance of the class. 

class class_name
{
    data members;
    member functions;
}


Why Java : 
__________

1) Platform Independence : Write Once and Run anywhere. 

2) Console

3) Windows

4) Web 

5) Mobile 

6) Service Oriented 

7) Packages : Contains group of related classes and interfaces that which belongs to one common group. If you want to overcome the naming conflicts between classes, then we need the help of packages. 

Java Features : 
_________________

	-> Simple : Java uses simple C/C++ syntaxes, as a programmer no need to take care of internal details like memory management etc.. as how much memory allocated to run the program, the same amount of memory will be reallocated automatically.

	-> Object Oriented : Java Support all object oriented programming features. 

	-> Compiled and Interpreted : Java Programs are compiled first, during compilation java code will be converted into bytecode, 		then .class file will be created. In interpretation, it reads the bytecode line by line and executes. 

	-> Portable : Ability to run the program without changing the source code, Java programs are programs that can run on any env, without changing the source code. 

	-> Securable : Java implements different levels of security as 

		(i) Compiler Level : Allows you to check as your program authorized to compile w.r.t. Specific version in the current 					system.

		(ii) ByteCode Level : Your programs authorized to run in the given environment or not. 

		(iii) Class Loader Level : Whether your custom classes are autorized to load into the memory or not. 

	-> Distributed : By using java, we can implement all distributed and robust applications. 

Java Architecture : 
____________________

	1) Java Program : Java code that which stored with extension .java 

	2) Java Class : Java program after compilation its converted into bytecode (.class) file will be created. 

	3) JVM (Java Virtual Machine) 

		(a) Class Loader : Used to load all classes that which are required to run the program. 
			There are 2 types of class loaders as 

			(i) Primordial Class Loader : Used to load all system classes that which are required to run the prog. 

			(ii) Class Loader Objects : Used to load all custom classes that which are required to run the prog. 

		(b) JIT Compiler (Just-In Time) : Used to convert bytecode into CPU understandable format. 

		(c) Execution Manager : Contains QUEUE of programs which are ready to run, where we can execute the program. 

	*** Before execution, it needs to undergone the security authentication ***

	4) Java API : It provides runtime env. that which allows you to run the java program. There are JDK and JRE

		JDK (java development kit) which allows you to compile the program.
		JRE (Java Runtime Env) Which provides env. to run the program. 


    Access Modifiers : 
    __________________


	1) private : Allows you to access members within the current class. 

	2) public  : Allows you to access members in entire application. 

	3) protected : Allows you to access members within current/derived classes. 

	4) friendly : By default, java possess friendly access modifier, allows you to access members within all classes
			of current package. 

Data Types : 
____________

There are 2 types of data types as 

	(i) value types : int, float, double, char, boolean etc...

	(ii) reference types : String, Object and Custom classes. 

value types will be stored in STACK memory and reference types will be stored in HEAP memory. 

System.out.println() : used to display any value or message. 

System.out.println("Welcome to Java");

System -> Class 
out -> Console
println() -> Method. 

You can define method main() as 

public static void main(String[] args) {
...
...
...
}


main() method must be static because no class object supposed to call the method main. 

You can compile any java program as 

javac filename.java

You can run java program as 

java filename 

To run the program, please give the command as

java filename

You can create an object to the class, as

class_name obj = new class_name(); 

Integer.parseInt() : used to convert string to integer. 

12 

"12" is string. 

Control Structures : 
______________________

Used to define the flow of the program. 

There are 2 types of control structures known as 

(i) Branching : Executes the statements based on the condition. 

	if...else : Executes the statements based on the condition. 

		if (condition) {
		  statement(s);
		} else {	
		   statement(s);
		}

(ii) Looping 



javac -cp . com/hexaware/trainer/Custom.java

java -cp . com/hexaware/trainer/ArrEx








































































